{"version":3,"file":"index.js","sources":["../../electron/main/index.js"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain } from 'electron'\r\nimport { release } from 'node:os'\r\nimport { join } from 'node:path'\r\nimport {autoUpdater} from 'electron-updater';\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.js    > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.DIST_ELECTRON = join(__dirname, '..')\r\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\r\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\r\n  ? join(process.env.DIST_ELECTRON, '../public')\r\n  : process.env.DIST\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n  app.quit()\r\n  process.exit(0)\r\n}\r\n\r\n// Remove electron security warnings\r\n// This warning only shows in development mode\r\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\r\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\r\n\r\nlet win = null;\r\n// Here, you can also use other preload\r\nconst preload = join(__dirname, '../preload/index.js')\r\nconst url = process.env.VITE_DEV_SERVER_URL\r\nconst indexHtml = join(process.env.DIST, 'index.html')\r\n\r\nasync function createWindow() {\r\n  win = new BrowserWindow({\r\n    title: 'Main window',\r\n    icon: join(process.env.VITE_PUBLIC, 'favicon.ico'),\r\n    webPreferences: {\r\n      preload,\r\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n      // Consider using contextBridge.exposeInMainWorld\r\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (process.env.VITE_DEV_SERVER_URL) { // electron-vite-vue#298\r\n    win.loadURL(url)\r\n    // Open devTool if the app is not packaged\r\n    win.webContents.openDevTools()\r\n  } else {\r\n    win.loadFile(indexHtml)\r\n  }\r\n\r\n  // Test actively push message to the Electron-Renderer\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n  })\r\n\r\n  // Make all links open with the browser, not with the application\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    if (url.startsWith('https:')) shell.openExternal(url)\r\n    return { action: 'deny' }\r\n  })\r\n\r\n  autoUpdater.checkForUpdatesAndNotify();\r\n  // win.webContents.on('will-navigate', (event, url) => { }) #344\r\n}\r\n\r\napp.whenReady().then(createWindow)\r\n\r\napp.on('window-all-closed', () => {\r\n  win = null\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\napp.on('second-instance', () => {\r\n  if (win) {\r\n    // Focus on the main window if the user tried to open another\r\n    if (win.isMinimized()) win.restore()\r\n    win.focus()\r\n  }\r\n})\r\n\r\napp.on('activate', () => {\r\n  const allWindows = BrowserWindow.getAllWindows()\r\n  if (allWindows.length) {\r\n    allWindows[0].focus()\r\n  } else {\r\n    createWindow()\r\n  }\r\n})\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle('open-win', (_, arg) => {\r\n  const childWindow = new BrowserWindow({\r\n    webPreferences: {\r\n      preload,\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (process.env.VITE_DEV_SERVER_URL) {\r\n    childWindow.loadURL(`${url}#${arg}`)\r\n  } else {\r\n    childWindow.loadFile(indexHtml, { hash: arg })\r\n  }\r\n})\r\n\r\nautoUpdater.on('update-available', function (){\r\n  win.webContents.send('update_already')\r\n});\r\n"],"names":["join","release","app","BrowserWindow","url","shell","autoUpdater","ipcMain"],"mappings":";;;;;AAeA,QAAQ,IAAI,gBAAgBA,eAAK,WAAW,IAAI;AAChD,QAAQ,IAAI,OAAOA,UAAI,KAAC,QAAQ,IAAI,eAAe,SAAS;AAC5D,QAAQ,IAAI,cAAc,QAAQ,IAAI,sBAClCA,UAAAA,KAAK,QAAQ,IAAI,eAAe,WAAW,IAC3C,QAAQ,IAAI;AAGhB,IAAIC,QAAAA,QAAS,EAAC,WAAW,KAAK;AAAGC,WAAAA,IAAI,4BAA6B;AAGlE,IAAI,QAAQ,aAAa;AAASA,WAAAA,IAAI,kBAAkBA,SAAAA,IAAI,SAAS;AAErE,IAAI,CAACA,SAAAA,IAAI,6BAA6B;AACpCA,WAAAA,IAAI,KAAM;AACV,UAAQ,KAAK,CAAC;AAChB;AAOA,IAAI,MAAM;AAEV,MAAM,UAAUF,UAAAA,KAAK,WAAW,qBAAqB;AACrD,MAAM,MAAM,QAAQ,IAAI;AACxB,MAAM,YAAYA,UAAAA,KAAK,QAAQ,IAAI,MAAM,YAAY;AAErD,eAAe,eAAe;AAC5B,QAAM,IAAIG,SAAAA,cAAc;AAAA,IACtB,OAAO;AAAA,IACP,MAAMH,UAAAA,KAAK,QAAQ,IAAI,aAAa,aAAa;AAAA,IACjD,gBAAgB;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB;AAAA,EACL,CAAG;AAED,MAAI,QAAQ,IAAI,qBAAqB;AACnC,QAAI,QAAQ,GAAG;AAEf,QAAI,YAAY,aAAc;AAAA,EAClC,OAAS;AACL,QAAI,SAAS,SAAS;AAAA,EACvB;AAGD,MAAI,YAAY,GAAG,mBAAmB,MAAM;AAC1C,+BAAK,YAAY,KAAK,yBAAwB,oBAAI,KAAI,GAAG;EAC7D,CAAG;AAGD,MAAI,YAAY,qBAAqB,CAAC,EAAE,KAAAI,KAAG,MAAO;AAChD,QAAIA,KAAI,WAAW,QAAQ;AAAGC,eAAK,MAAC,aAAaD,IAAG;AACpD,WAAO,EAAE,QAAQ,OAAQ;AAAA,EAC7B,CAAG;AAEDE,kBAAW,YAAC,yBAAwB;AAEtC;AAEAJ,SAAAA,IAAI,UAAS,EAAG,KAAK,YAAY;AAEjCA,SAAAA,IAAI,GAAG,qBAAqB,MAAM;AAChC,QAAM;AACN,MAAI,QAAQ,aAAa;AAAUA,aAAAA,IAAI,KAAM;AAC/C,CAAC;AAEDA,SAAAA,IAAI,GAAG,mBAAmB,MAAM;AAC9B,MAAI,KAAK;AAEP,QAAI,IAAI;AAAe,UAAI,QAAS;AACpC,QAAI,MAAO;AAAA,EACZ;AACH,CAAC;AAEDA,SAAAA,IAAI,GAAG,YAAY,MAAM;AACvB,QAAM,aAAaC,SAAa,cAAC,cAAe;AAChD,MAAI,WAAW,QAAQ;AACrB,eAAW,CAAC,EAAE,MAAO;AAAA,EACzB,OAAS;AACL,iBAAc;AAAA,EACf;AACH,CAAC;AAGDI,SAAO,QAAC,OAAO,YAAY,CAAC,GAAG,QAAQ;AACrC,QAAM,cAAc,IAAIJ,uBAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACnB;AAAA,EACL,CAAG;AAED,MAAI,QAAQ,IAAI,qBAAqB;AACnC,gBAAY,QAAQ,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,EACvC,OAAS;AACL,gBAAY,SAAS,WAAW,EAAE,MAAM,IAAG,CAAE;AAAA,EAC9C;AACH,CAAC;AAEDG,gBAAAA,YAAY,GAAG,oBAAoB,WAAW;AAC5C,MAAI,YAAY,KAAK,gBAAgB;AACvC,CAAC;"}